import{_ as n,c as a,a3 as p,o as l}from"./chunks/framework.C4Vvvhxx.js";const k=JSON.parse('{"title":"AutoHotKey 配置","description":"","frontmatter":{},"headers":[],"relativePath":"configtur/AutohotKey.md","filePath":"configtur/AutohotKey.md","lastUpdated":null}'),e={name:"configtur/AutohotKey.md"};function c(t,s,o,i,r,u){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="autohotkey-配置" tabindex="-1">AutoHotKey 配置 <a class="header-anchor" href="#autohotkey-配置" aria-label="Permalink to &quot;AutoHotKey 配置&quot;">​</a></h1><p>效果：(o3mini说的)</p><ol><li>使 CapsLock 失效并充当 Ctrl 键：</li></ol><p>通过 SetCapsLockState(&quot;alwaysoff&quot;) 禁用 CapsLock 自身的切换功能。 当单独按下 CapsLock 时，不是切换大小写，而是发送 Ctrl 键的按下和释放事件，让它在组合键中充当 Ctrl 键的作用。 2. 单独点击 CapsLock 发送 Esc：</p><p>当只点击 CapsLock（即按下后没有再按其他键），脚本检测到最后的按键依然是 CapsLock（A_PriorKey == &quot;CapsLock&quot;）并且全局变量 g_DoNotAbortSendEsc 为 true 时，会发送 Esc 键。这可以用来触发输入法的切换或其它设定的功能。</p><div class="language-ahk vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ahk</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#Requires AutoHotkey v2</span></span>
<span class="line"><span>; Install the keyboard hook to capture the real key state of the keyboard</span></span>
<span class="line"><span>InstallKeybdHook(true)</span></span>
<span class="line"><span>; Disable the CapsLock key</span></span>
<span class="line"><span>SetCapsLockState(&quot;alwaysoff&quot;)</span></span>
<span class="line"><span>; Send esc key when Capslock is pressed as default</span></span>
<span class="line"><span>g_DoNotAbortSendEsc := true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$*Capslock::{ ; Capture CapsLock key press</span></span>
<span class="line"><span>  global g_DoNotAbortSendEsc ; use global variable g_DoNotAbortSendEsc</span></span>
<span class="line"><span>  g_DoNotAbortSendEsc := true ; set g_DoNotAbortSendEsc to true</span></span>
<span class="line"><span>  Send(&quot;{LControl Down}&quot;) ; send Ctrl key down</span></span>
<span class="line"><span>  KeyWait(&quot;CapsLock&quot;) ; capture CapsLock key up</span></span>
<span class="line"><span>  Send(&quot;{LControl Up}&quot;) ; send Ctrl key up</span></span>
<span class="line"><span>  if (A_PriorKey == &quot;CapsLock&quot; ; if the last key is Capslock</span></span>
<span class="line"><span>     &amp;&amp; g_DoNotAbortSendEsc) { ; if the g_DoNotAbortSendEsc is true</span></span>
<span class="line"><span>    Send(&quot;{Esc}&quot;) ; send Esc key</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>LCtrl::#Space  ;</span></span>
<span class="line"><span>; capture any key with Ctrl key down</span></span>
<span class="line"><span>~^*a:: ; * means can be used with any modifier key, ~ means donot block the original key, ^ means Ctrl key, a means the key is a</span></span>
<span class="line"><span>~^*b::</span></span>
<span class="line"><span>~^*c::</span></span>
<span class="line"><span>~^*d::</span></span>
<span class="line"><span>~^*e::</span></span>
<span class="line"><span>~^*f::</span></span>
<span class="line"><span>~^*g::</span></span>
<span class="line"><span>~^*h::</span></span>
<span class="line"><span>~^*i::</span></span>
<span class="line"><span>~^*j::</span></span>
<span class="line"><span>~^*k::</span></span>
<span class="line"><span>~^*l::</span></span>
<span class="line"><span>~^*m::</span></span>
<span class="line"><span>~^*n::</span></span>
<span class="line"><span>~^*o::</span></span>
<span class="line"><span>~^*p::</span></span>
<span class="line"><span>~^*q::</span></span>
<span class="line"><span>~^*r::</span></span>
<span class="line"><span>~^*s::</span></span>
<span class="line"><span>~^*t::</span></span>
<span class="line"><span>~^*u::</span></span>
<span class="line"><span>~^*v::</span></span>
<span class="line"><span>~^*w::</span></span>
<span class="line"><span>~^*x::</span></span>
<span class="line"><span>~^*y::</span></span>
<span class="line"><span>~^*z::</span></span>
<span class="line"><span>~^*1::</span></span>
<span class="line"><span>~^*2::</span></span>
<span class="line"><span>~^*3::</span></span>
<span class="line"><span>~^*4::</span></span>
<span class="line"><span>~^*5::</span></span>
<span class="line"><span>~^*6::</span></span>
<span class="line"><span>~^*7::</span></span>
<span class="line"><span>~^*8::</span></span>
<span class="line"><span>~^*9::</span></span>
<span class="line"><span>~^*0::</span></span>
<span class="line"><span>~^*Space::</span></span>
<span class="line"><span>~^*Backspace::</span></span>
<span class="line"><span>~^*Delete::</span></span>
<span class="line"><span>~^*Insert::</span></span>
<span class="line"><span>~^*Home::</span></span>
<span class="line"><span>~^*End::</span></span>
<span class="line"><span>~^*PgUp::</span></span>
<span class="line"><span>~^*PgDn::</span></span>
<span class="line"><span>~^*Tab::</span></span>
<span class="line"><span>~^*Enter::</span></span>
<span class="line"><span>~^*,::</span></span>
<span class="line"><span>~^*.::</span></span>
<span class="line"><span>~^*/::</span></span>
<span class="line"><span>~^*;::</span></span>
<span class="line"><span>~^*&#39;::</span></span>
<span class="line"><span>~^*[::</span></span>
<span class="line"><span>~^*]::</span></span>
<span class="line"><span>~^*\\::</span></span>
<span class="line"><span>~^*-::</span></span>
<span class="line"><span>~^*=::</span></span>
<span class="line"><span>~^*\`::</span></span>
<span class="line"><span>~^*F1::</span></span>
<span class="line"><span>~^*F2::</span></span>
<span class="line"><span>~^*F3::</span></span>
<span class="line"><span>~^*F4::</span></span>
<span class="line"><span>~^*F5::</span></span>
<span class="line"><span>~^*F6::</span></span>
<span class="line"><span>~^*F7::</span></span>
<span class="line"><span>~^*F8::</span></span>
<span class="line"><span>~^*F9::</span></span>
<span class="line"><span>~^*F10::</span></span>
<span class="line"><span>~^*F11::</span></span>
<span class="line"><span>~^*F12::{</span></span>
<span class="line"><span>  global g_DoNotAbortSendEsc</span></span>
<span class="line"><span>  g_DoNotAbortSendEsc := false</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,6)]))}const y=n(e,[["render",c]]);export{k as __pageData,y as default};
